///
/// EventKitGeoLocation.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EventKitCoordinate` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EventKitCoordinate; }

#include "EventKitCoordinate.hpp"

namespace margelo::nitro::eventkit {

  /**
   * A struct which can be represented as a JavaScript object (EventKitGeoLocation).
   */
  struct EventKitGeoLocation {
  public:
    EventKitCoordinate coordinate     SWIFT_PRIVATE;
    double altitude     SWIFT_PRIVATE;
    double ellipsoidalAltitude     SWIFT_PRIVATE;
    double horizontalAccuracy     SWIFT_PRIVATE;
    double verticalAccuracy     SWIFT_PRIVATE;
    double course     SWIFT_PRIVATE;
    double courseAccuracy     SWIFT_PRIVATE;
    double speed     SWIFT_PRIVATE;
    double speedAccuracy     SWIFT_PRIVATE;
    double timestamp     SWIFT_PRIVATE;

  public:
    EventKitGeoLocation() = default;
    explicit EventKitGeoLocation(EventKitCoordinate coordinate, double altitude, double ellipsoidalAltitude, double horizontalAccuracy, double verticalAccuracy, double course, double courseAccuracy, double speed, double speedAccuracy, double timestamp): coordinate(coordinate), altitude(altitude), ellipsoidalAltitude(ellipsoidalAltitude), horizontalAccuracy(horizontalAccuracy), verticalAccuracy(verticalAccuracy), course(course), courseAccuracy(courseAccuracy), speed(speed), speedAccuracy(speedAccuracy), timestamp(timestamp) {}
  };

} // namespace margelo::nitro::eventkit

namespace margelo::nitro {

  using namespace margelo::nitro::eventkit;

  // C++ EventKitGeoLocation <> JS EventKitGeoLocation (object)
  template <>
  struct JSIConverter<EventKitGeoLocation> final {
    static inline EventKitGeoLocation fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return EventKitGeoLocation(
        JSIConverter<EventKitCoordinate>::fromJSI(runtime, obj.getProperty(runtime, "coordinate")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "altitude")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "ellipsoidalAltitude")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "horizontalAccuracy")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "verticalAccuracy")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "course")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "courseAccuracy")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "speed")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "speedAccuracy")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "timestamp"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const EventKitGeoLocation& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "coordinate", JSIConverter<EventKitCoordinate>::toJSI(runtime, arg.coordinate));
      obj.setProperty(runtime, "altitude", JSIConverter<double>::toJSI(runtime, arg.altitude));
      obj.setProperty(runtime, "ellipsoidalAltitude", JSIConverter<double>::toJSI(runtime, arg.ellipsoidalAltitude));
      obj.setProperty(runtime, "horizontalAccuracy", JSIConverter<double>::toJSI(runtime, arg.horizontalAccuracy));
      obj.setProperty(runtime, "verticalAccuracy", JSIConverter<double>::toJSI(runtime, arg.verticalAccuracy));
      obj.setProperty(runtime, "course", JSIConverter<double>::toJSI(runtime, arg.course));
      obj.setProperty(runtime, "courseAccuracy", JSIConverter<double>::toJSI(runtime, arg.courseAccuracy));
      obj.setProperty(runtime, "speed", JSIConverter<double>::toJSI(runtime, arg.speed));
      obj.setProperty(runtime, "speedAccuracy", JSIConverter<double>::toJSI(runtime, arg.speedAccuracy));
      obj.setProperty(runtime, "timestamp", JSIConverter<double>::toJSI(runtime, arg.timestamp));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<EventKitCoordinate>::canConvert(runtime, obj.getProperty(runtime, "coordinate"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "altitude"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "ellipsoidalAltitude"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "horizontalAccuracy"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "verticalAccuracy"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "course"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "courseAccuracy"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "speed"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "speedAccuracy"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "timestamp"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
