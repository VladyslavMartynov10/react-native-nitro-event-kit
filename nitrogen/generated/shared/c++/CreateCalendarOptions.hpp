///
/// CreateCalendarOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EventKitEntityType` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EventKitEntityType; }
// Forward declaration of `EventKitSourceType` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EventKitSourceType; }

#include <string>
#include <optional>
#include "EventKitEntityType.hpp"
#include "EventKitSourceType.hpp"

namespace margelo::nitro::eventkit {

  /**
   * A struct which can be represented as a JavaScript object (CreateCalendarOptions).
   */
  struct CreateCalendarOptions {
  public:
    std::string name     SWIFT_PRIVATE;
    std::optional<std::string> cgColor     SWIFT_PRIVATE;
    EventKitEntityType entityType     SWIFT_PRIVATE;
    std::optional<EventKitSourceType> sourceType     SWIFT_PRIVATE;

  public:
    CreateCalendarOptions() = default;
    explicit CreateCalendarOptions(std::string name, std::optional<std::string> cgColor, EventKitEntityType entityType, std::optional<EventKitSourceType> sourceType): name(name), cgColor(cgColor), entityType(entityType), sourceType(sourceType) {}
  };

} // namespace margelo::nitro::eventkit

namespace margelo::nitro {

  using namespace margelo::nitro::eventkit;

  // C++ CreateCalendarOptions <> JS CreateCalendarOptions (object)
  template <>
  struct JSIConverter<CreateCalendarOptions> final {
    static inline CreateCalendarOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return CreateCalendarOptions(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cgColor")),
        JSIConverter<EventKitEntityType>::fromJSI(runtime, obj.getProperty(runtime, "entityType")),
        JSIConverter<std::optional<EventKitSourceType>>::fromJSI(runtime, obj.getProperty(runtime, "sourceType"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const CreateCalendarOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "cgColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cgColor));
      obj.setProperty(runtime, "entityType", JSIConverter<EventKitEntityType>::toJSI(runtime, arg.entityType));
      obj.setProperty(runtime, "sourceType", JSIConverter<std::optional<EventKitSourceType>>::toJSI(runtime, arg.sourceType));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cgColor"))) return false;
      if (!JSIConverter<EventKitEntityType>::canConvert(runtime, obj.getProperty(runtime, "entityType"))) return false;
      if (!JSIConverter<std::optional<EventKitSourceType>>::canConvert(runtime, obj.getProperty(runtime, "sourceType"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
