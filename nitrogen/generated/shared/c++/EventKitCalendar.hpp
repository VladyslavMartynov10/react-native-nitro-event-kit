///
/// EventKitCalendar.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EventKitCalendarType` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EventKitCalendarType; }
// Forward declaration of `EventKitCalendarEventAvailabilityMask` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EventKitCalendarEventAvailabilityMask; }
// Forward declaration of `EventKitEntityMask` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EventKitEntityMask; }
// Forward declaration of `EventKitSource` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EventKitSource; }

#include <string>
#include "EventKitCalendarType.hpp"
#include <optional>
#include "EventKitCalendarEventAvailabilityMask.hpp"
#include "EventKitEntityMask.hpp"
#include "EventKitSource.hpp"

namespace margelo::nitro::eventkit {

  /**
   * A struct which can be represented as a JavaScript object (EventKitCalendar).
   */
  struct EventKitCalendar {
  public:
    std::string calendarIdentifier     SWIFT_PRIVATE;
    std::string title     SWIFT_PRIVATE;
    EventKitCalendarType type     SWIFT_PRIVATE;
    bool allowsContentModifications     SWIFT_PRIVATE;
    std::optional<bool> isSubscribed     SWIFT_PRIVATE;
    std::optional<bool> isImmutable     SWIFT_PRIVATE;
    std::optional<std::string> cgColor     SWIFT_PRIVATE;
    EventKitCalendarEventAvailabilityMask supportedEventAvailabilities     SWIFT_PRIVATE;
    EventKitEntityMask allowedEntityTypes     SWIFT_PRIVATE;
    EventKitSource source     SWIFT_PRIVATE;

  public:
    explicit EventKitCalendar(std::string calendarIdentifier, std::string title, EventKitCalendarType type, bool allowsContentModifications, std::optional<bool> isSubscribed, std::optional<bool> isImmutable, std::optional<std::string> cgColor, EventKitCalendarEventAvailabilityMask supportedEventAvailabilities, EventKitEntityMask allowedEntityTypes, EventKitSource source): calendarIdentifier(calendarIdentifier), title(title), type(type), allowsContentModifications(allowsContentModifications), isSubscribed(isSubscribed), isImmutable(isImmutable), cgColor(cgColor), supportedEventAvailabilities(supportedEventAvailabilities), allowedEntityTypes(allowedEntityTypes), source(source) {}
  };

} // namespace margelo::nitro::eventkit

namespace margelo::nitro {

  using namespace margelo::nitro::eventkit;

  // C++ EventKitCalendar <> JS EventKitCalendar (object)
  template <>
  struct JSIConverter<EventKitCalendar> {
    static inline EventKitCalendar fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return EventKitCalendar(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "calendarIdentifier")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "title")),
        JSIConverter<EventKitCalendarType>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "allowsContentModifications")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "isSubscribed")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "isImmutable")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "cgColor")),
        JSIConverter<EventKitCalendarEventAvailabilityMask>::fromJSI(runtime, obj.getProperty(runtime, "supportedEventAvailabilities")),
        JSIConverter<EventKitEntityMask>::fromJSI(runtime, obj.getProperty(runtime, "allowedEntityTypes")),
        JSIConverter<EventKitSource>::fromJSI(runtime, obj.getProperty(runtime, "source"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const EventKitCalendar& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "calendarIdentifier", JSIConverter<std::string>::toJSI(runtime, arg.calendarIdentifier));
      obj.setProperty(runtime, "title", JSIConverter<std::string>::toJSI(runtime, arg.title));
      obj.setProperty(runtime, "type", JSIConverter<EventKitCalendarType>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "allowsContentModifications", JSIConverter<bool>::toJSI(runtime, arg.allowsContentModifications));
      obj.setProperty(runtime, "isSubscribed", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.isSubscribed));
      obj.setProperty(runtime, "isImmutable", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.isImmutable));
      obj.setProperty(runtime, "cgColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.cgColor));
      obj.setProperty(runtime, "supportedEventAvailabilities", JSIConverter<EventKitCalendarEventAvailabilityMask>::toJSI(runtime, arg.supportedEventAvailabilities));
      obj.setProperty(runtime, "allowedEntityTypes", JSIConverter<EventKitEntityMask>::toJSI(runtime, arg.allowedEntityTypes));
      obj.setProperty(runtime, "source", JSIConverter<EventKitSource>::toJSI(runtime, arg.source));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "calendarIdentifier"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "title"))) return false;
      if (!JSIConverter<EventKitCalendarType>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "allowsContentModifications"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "isSubscribed"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "isImmutable"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "cgColor"))) return false;
      if (!JSIConverter<EventKitCalendarEventAvailabilityMask>::canConvert(runtime, obj.getProperty(runtime, "supportedEventAvailabilities"))) return false;
      if (!JSIConverter<EventKitEntityMask>::canConvert(runtime, obj.getProperty(runtime, "allowedEntityTypes"))) return false;
      if (!JSIConverter<EventKitSource>::canConvert(runtime, obj.getProperty(runtime, "source"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
