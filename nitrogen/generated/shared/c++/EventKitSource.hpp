///
/// EventKitSource.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EventKitSourceType` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EventKitSourceType; }

#include <string>
#include "EventKitSourceType.hpp"
#include <optional>

namespace margelo::nitro::eventkit {

  /**
   * A struct which can be represented as a JavaScript object (EventKitSource).
   */
  struct EventKitSource {
  public:
    std::string sourceIdentifier     SWIFT_PRIVATE;
    EventKitSourceType sourceType     SWIFT_PRIVATE;
    std::string title     SWIFT_PRIVATE;
    std::optional<bool> isDelegate     SWIFT_PRIVATE;

  public:
    explicit EventKitSource(std::string sourceIdentifier, EventKitSourceType sourceType, std::string title, std::optional<bool> isDelegate): sourceIdentifier(sourceIdentifier), sourceType(sourceType), title(title), isDelegate(isDelegate) {}
  };

} // namespace margelo::nitro::eventkit

namespace margelo::nitro {

  using namespace margelo::nitro::eventkit;

  // C++ EventKitSource <> JS EventKitSource (object)
  template <>
  struct JSIConverter<EventKitSource> {
    static inline EventKitSource fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return EventKitSource(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "sourceIdentifier")),
        JSIConverter<EventKitSourceType>::fromJSI(runtime, obj.getProperty(runtime, "sourceType")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "title")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "isDelegate"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const EventKitSource& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "sourceIdentifier", JSIConverter<std::string>::toJSI(runtime, arg.sourceIdentifier));
      obj.setProperty(runtime, "sourceType", JSIConverter<EventKitSourceType>::toJSI(runtime, arg.sourceType));
      obj.setProperty(runtime, "title", JSIConverter<std::string>::toJSI(runtime, arg.title));
      obj.setProperty(runtime, "isDelegate", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.isDelegate));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "sourceIdentifier"))) return false;
      if (!JSIConverter<EventKitSourceType>::canConvert(runtime, obj.getProperty(runtime, "sourceType"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "title"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "isDelegate"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
