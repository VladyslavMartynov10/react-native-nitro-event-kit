///
/// HybridEventKitSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EventKitCalendar` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EventKitCalendar; }
// Forward declaration of `EventKitEvent` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EventKitEvent; }
// Forward declaration of `MonthlyEventOptions` to properly resolve imports.
namespace margelo::nitro::eventkit { struct MonthlyEventOptions; }
// Forward declaration of `RangeEventOptions` to properly resolve imports.
namespace margelo::nitro::eventkit { struct RangeEventOptions; }
// Forward declaration of `CreateEventOptions` to properly resolve imports.
namespace margelo::nitro::eventkit { struct CreateEventOptions; }
// Forward declaration of `CreateCalendarOptions` to properly resolve imports.
namespace margelo::nitro::eventkit { struct CreateCalendarOptions; }
// Forward declaration of `EditEventOptions` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EditEventOptions; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "EventKitCalendar.hpp"
#include "EventKitEvent.hpp"
#include "MonthlyEventOptions.hpp"
#include "RangeEventOptions.hpp"
#include "CreateEventOptions.hpp"
#include <string>
#include "CreateCalendarOptions.hpp"
#include "EditEventOptions.hpp"

namespace margelo::nitro::eventkit {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `EventKit`
   * Inherit this class to create instances of `HybridEventKitSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridEventKit: public HybridEventKitSpec {
   * public:
   *   HybridEventKit(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridEventKitSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridEventKitSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridEventKitSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<std::vector<EventKitCalendar>>> getActiveCalendars() = 0;
      virtual std::shared_ptr<Promise<std::vector<EventKitEvent>>> getMonthlyCalendarEvents(const MonthlyEventOptions& options) = 0;
      virtual std::shared_ptr<Promise<std::vector<EventKitEvent>>> getCalendarEventsByRange(const RangeEventOptions& options) = 0;
      virtual std::shared_ptr<Promise<EventKitEvent>> createEvent(const CreateEventOptions& options) = 0;
      virtual std::shared_ptr<Promise<bool>> deleteEvent(const std::string& eventIdentifier) = 0;
      virtual std::shared_ptr<Promise<void>> openCalendarEvent(const std::string& eventIdentifier) = 0;
      virtual std::shared_ptr<Promise<EventKitCalendar>> createCalendar(const CreateCalendarOptions& options) = 0;
      virtual std::shared_ptr<Promise<EventKitEvent>> editEvent(const std::string& eventIdentifier, const EditEventOptions& options) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "EventKit";
  };

} // namespace margelo::nitro::eventkit
