///
/// EKEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EKEventAvailability` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EKEventAvailability; }
// Forward declaration of `EKEventStatus` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EKEventStatus; }

#include <string>
#include "EKEventAvailability.hpp"
#include "EKEventStatus.hpp"
#include <optional>

namespace margelo::nitro::eventkit {

  /**
   * A struct which can be represented as a JavaScript object (EKEvent).
   */
  struct EKEvent {
  public:
    std::string eventIdentifier     SWIFT_PRIVATE;
    bool isAllDay     SWIFT_PRIVATE;
    double startDate     SWIFT_PRIVATE;
    double endDate     SWIFT_PRIVATE;
    EKEventAvailability availability     SWIFT_PRIVATE;
    EKEventStatus status     SWIFT_PRIVATE;
    bool isDetached     SWIFT_PRIVATE;
    std::optional<double> occurrenceDate     SWIFT_PRIVATE;
    std::optional<std::string> birthdayContactIdentifier     SWIFT_PRIVATE;

  public:
    explicit EKEvent(std::string eventIdentifier, bool isAllDay, double startDate, double endDate, EKEventAvailability availability, EKEventStatus status, bool isDetached, std::optional<double> occurrenceDate, std::optional<std::string> birthdayContactIdentifier): eventIdentifier(eventIdentifier), isAllDay(isAllDay), startDate(startDate), endDate(endDate), availability(availability), status(status), isDetached(isDetached), occurrenceDate(occurrenceDate), birthdayContactIdentifier(birthdayContactIdentifier) {}
  };

} // namespace margelo::nitro::eventkit

namespace margelo::nitro {

  using namespace margelo::nitro::eventkit;

  // C++ EKEvent <> JS EKEvent (object)
  template <>
  struct JSIConverter<EKEvent> {
    static inline EKEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return EKEvent(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "eventIdentifier")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isAllDay")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "startDate")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "endDate")),
        JSIConverter<EKEventAvailability>::fromJSI(runtime, obj.getProperty(runtime, "availability")),
        JSIConverter<EKEventStatus>::fromJSI(runtime, obj.getProperty(runtime, "status")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isDetached")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "occurrenceDate")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "birthdayContactIdentifier"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const EKEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "eventIdentifier", JSIConverter<std::string>::toJSI(runtime, arg.eventIdentifier));
      obj.setProperty(runtime, "isAllDay", JSIConverter<bool>::toJSI(runtime, arg.isAllDay));
      obj.setProperty(runtime, "startDate", JSIConverter<double>::toJSI(runtime, arg.startDate));
      obj.setProperty(runtime, "endDate", JSIConverter<double>::toJSI(runtime, arg.endDate));
      obj.setProperty(runtime, "availability", JSIConverter<EKEventAvailability>::toJSI(runtime, arg.availability));
      obj.setProperty(runtime, "status", JSIConverter<EKEventStatus>::toJSI(runtime, arg.status));
      obj.setProperty(runtime, "isDetached", JSIConverter<bool>::toJSI(runtime, arg.isDetached));
      obj.setProperty(runtime, "occurrenceDate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.occurrenceDate));
      obj.setProperty(runtime, "birthdayContactIdentifier", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.birthdayContactIdentifier));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "eventIdentifier"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isAllDay"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "startDate"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "endDate"))) return false;
      if (!JSIConverter<EKEventAvailability>::canConvert(runtime, obj.getProperty(runtime, "availability"))) return false;
      if (!JSIConverter<EKEventStatus>::canConvert(runtime, obj.getProperty(runtime, "status"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isDetached"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "occurrenceDate"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "birthdayContactIdentifier"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
