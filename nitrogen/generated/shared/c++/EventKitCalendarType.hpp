///
/// EventKitCalendarType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <cmath>
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::eventkit {

  /**
   * An enum which can be represented as a JavaScript enum (EventKitCalendarType).
   */
  enum class EventKitCalendarType {
    LOCAL      SWIFT_NAME(local) = 0,
    CALDAV      SWIFT_NAME(caldav) = 1,
    EXCHANGE      SWIFT_NAME(exchange) = 2,
    SUBSCRIPTION      SWIFT_NAME(subscription) = 3,
    BIRTHDAY      SWIFT_NAME(birthday) = 4,
  } CLOSED_ENUM;

} // namespace margelo::nitro::eventkit

namespace margelo::nitro {

  using namespace margelo::nitro::eventkit;

  // C++ EventKitCalendarType <> JS EventKitCalendarType (enum)
  template <>
  struct JSIConverter<EventKitCalendarType> {
    static inline EventKitCalendarType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<EventKitCalendarType>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, EventKitCalendarType arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double integer;
      double fraction = modf(value.getNumber(), &integer);
      if (fraction != 0.0) {
        // It is some kind of floating point number - our enums are ints.
        return false;
      }
      // Check if we are within the bounds of the enum.
      return integer >= 0 && integer <= 4;
    }
  };

} // namespace margelo::nitro
