///
/// HybridCalendarPermissionSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCalendarPermissionSpec``
public protocol HybridCalendarPermissionSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getPermissionsStatus() throws -> EventKitPermissionResult
  func requestPermission() throws -> Promise<EventKitPermissionResult>
}

/// See ``HybridCalendarPermissionSpec``
public class HybridCalendarPermissionSpec_base {
  private weak var cxxWrapper: HybridCalendarPermissionSpec_cxx? = nil
  public func getCxxWrapper() -> HybridCalendarPermissionSpec_cxx {
  #if DEBUG
    guard self is HybridCalendarPermissionSpec else {
      fatalError("`self` is not a `HybridCalendarPermissionSpec`! Did you accidentally inherit from `HybridCalendarPermissionSpec_base` instead of `HybridCalendarPermissionSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCalendarPermissionSpec_cxx(self as! HybridCalendarPermissionSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CalendarPermission HybridObject.
 * Implement this protocol to create Swift-based instances of CalendarPermission.
 * ```swift
 * class HybridCalendarPermission : HybridCalendarPermissionSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCalendarPermissionSpec = HybridCalendarPermissionSpec_protocol & HybridCalendarPermissionSpec_base
