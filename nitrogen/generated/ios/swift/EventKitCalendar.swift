///
/// EventKitCalendar.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `EventKitCalendar`, backed by a C++ struct.
 */
public typealias EventKitCalendar = margelo.nitro.eventkit.EventKitCalendar

public extension EventKitCalendar {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `EventKitCalendar`.
   */
  init(calendarIdentifier: String, title: String, type: EventKitCalendarType, allowsContentModifications: Bool, isSubscribed: Bool?, isImmutable: Bool?, cgColor: String?, supportedEventAvailabilities: EventKitCalendarEventAvailabilityMask, allowedEntityTypes: EventKitEntityMask, source: EventKitSource) {
    self.init(std.string(calendarIdentifier), std.string(title), type, allowsContentModifications, { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = isSubscribed {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = isImmutable {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = cgColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), supportedEventAvailabilities, allowedEntityTypes, source)
  }

  var calendarIdentifier: String {
    @inline(__always)
    get {
      return String(self.__calendarIdentifier)
    }
    @inline(__always)
    set {
      self.__calendarIdentifier = std.string(newValue)
    }
  }
  
  var title: String {
    @inline(__always)
    get {
      return String(self.__title)
    }
    @inline(__always)
    set {
      self.__title = std.string(newValue)
    }
  }
  
  var type: EventKitCalendarType {
    @inline(__always)
    get {
      return self.__type
    }
    @inline(__always)
    set {
      self.__type = newValue
    }
  }
  
  var allowsContentModifications: Bool {
    @inline(__always)
    get {
      return self.__allowsContentModifications
    }
    @inline(__always)
    set {
      self.__allowsContentModifications = newValue
    }
  }
  
  var isSubscribed: Bool? {
    @inline(__always)
    get {
      return self.__isSubscribed.value
    }
    @inline(__always)
    set {
      self.__isSubscribed = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var isImmutable: Bool? {
    @inline(__always)
    get {
      return self.__isImmutable.value
    }
    @inline(__always)
    set {
      self.__isImmutable = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var cgColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__cgColor.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__cgColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var supportedEventAvailabilities: EventKitCalendarEventAvailabilityMask {
    @inline(__always)
    get {
      return self.__supportedEventAvailabilities
    }
    @inline(__always)
    set {
      self.__supportedEventAvailabilities = newValue
    }
  }
  
  var allowedEntityTypes: EventKitEntityMask {
    @inline(__always)
    get {
      return self.__allowedEntityTypes
    }
    @inline(__always)
    set {
      self.__allowedEntityTypes = newValue
    }
  }
  
  var source: EventKitSource {
    @inline(__always)
    get {
      return self.__source
    }
    @inline(__always)
    set {
      self.__source = newValue
    }
  }
}
