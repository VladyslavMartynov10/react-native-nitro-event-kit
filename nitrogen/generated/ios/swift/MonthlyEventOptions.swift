///
/// MonthlyEventOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `MonthlyEventOptions`, backed by a C++ struct.
 */
public typealias MonthlyEventOptions = margelo.nitro.eventkit.MonthlyEventOptions

public extension MonthlyEventOptions {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `MonthlyEventOptions`.
   */
  init(entityType: EventKitEntityType, calendarId: String?) {
    self.init(entityType, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = calendarId {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var entityType: EventKitEntityType {
    @inline(__always)
    get {
      return self.__entityType
    }
    @inline(__always)
    set {
      self.__entityType = newValue
    }
  }
  
  var calendarId: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__calendarId.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__calendarId = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
