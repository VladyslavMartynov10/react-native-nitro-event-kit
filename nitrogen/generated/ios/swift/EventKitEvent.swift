///
/// EventKitEvent.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `EventKitEvent`, backed by a C++ struct.
 */
public typealias EventKitEvent = margelo.nitro.eventkit.EventKitEvent

public extension EventKitEvent {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `EventKitEvent`.
   */
  init(eventIdentifier: String, isAllDay: Bool, startDate: Double, endDate: Double, structuredLocation: EventKitStructuredLocation?, organizer: EventKitParticipant?, availability: EventKitAvailability, status: EventKitStatus, isDetached: Bool, occurrenceDate: Double?, birthdayContactIdentifier: String?, createdAt: Double, updatedAt: Double) {
    self.init(std.string(eventIdentifier), isAllDay, startDate, endDate, { () -> bridge.std__optional_EventKitStructuredLocation_ in
      if let __unwrappedValue = structuredLocation {
        return bridge.create_std__optional_EventKitStructuredLocation_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_EventKitParticipant_ in
      if let __unwrappedValue = organizer {
        return bridge.create_std__optional_EventKitParticipant_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), availability, status, isDetached, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = occurrenceDate {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = birthdayContactIdentifier {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), createdAt, updatedAt)
  }

  var eventIdentifier: String {
    @inline(__always)
    get {
      return String(self.__eventIdentifier)
    }
    @inline(__always)
    set {
      self.__eventIdentifier = std.string(newValue)
    }
  }
  
  var isAllDay: Bool {
    @inline(__always)
    get {
      return self.__isAllDay
    }
    @inline(__always)
    set {
      self.__isAllDay = newValue
    }
  }
  
  var startDate: Double {
    @inline(__always)
    get {
      return self.__startDate
    }
    @inline(__always)
    set {
      self.__startDate = newValue
    }
  }
  
  var endDate: Double {
    @inline(__always)
    get {
      return self.__endDate
    }
    @inline(__always)
    set {
      self.__endDate = newValue
    }
  }
  
  var structuredLocation: EventKitStructuredLocation? {
    @inline(__always)
    get {
      return { () -> EventKitStructuredLocation? in
        if let __unwrapped = self.__structuredLocation.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__structuredLocation = { () -> bridge.std__optional_EventKitStructuredLocation_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_EventKitStructuredLocation_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var organizer: EventKitParticipant? {
    @inline(__always)
    get {
      return { () -> EventKitParticipant? in
        if let __unwrapped = self.__organizer.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__organizer = { () -> bridge.std__optional_EventKitParticipant_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_EventKitParticipant_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var availability: EventKitAvailability {
    @inline(__always)
    get {
      return self.__availability
    }
    @inline(__always)
    set {
      self.__availability = newValue
    }
  }
  
  var status: EventKitStatus {
    @inline(__always)
    get {
      return self.__status
    }
    @inline(__always)
    set {
      self.__status = newValue
    }
  }
  
  var isDetached: Bool {
    @inline(__always)
    get {
      return self.__isDetached
    }
    @inline(__always)
    set {
      self.__isDetached = newValue
    }
  }
  
  var occurrenceDate: Double? {
    @inline(__always)
    get {
      return self.__occurrenceDate.value
    }
    @inline(__always)
    set {
      self.__occurrenceDate = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var birthdayContactIdentifier: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__birthdayContactIdentifier.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__birthdayContactIdentifier = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var createdAt: Double {
    @inline(__always)
    get {
      return self.__createdAt
    }
    @inline(__always)
    set {
      self.__createdAt = newValue
    }
  }
  
  var updatedAt: Double {
    @inline(__always)
    get {
      return self.__updatedAt
    }
    @inline(__always)
    set {
      self.__updatedAt = newValue
    }
  }
}
