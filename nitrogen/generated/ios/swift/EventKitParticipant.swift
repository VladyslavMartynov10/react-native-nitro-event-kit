///
/// EventKitParticipant.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `EventKitParticipant`, backed by a C++ struct.
 */
public typealias EventKitParticipant = margelo.nitro.eventkit.EventKitParticipant

public extension EventKitParticipant {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `EventKitParticipant`.
   */
  init(url: String, name: String?, participantStatus: EventKitParticipantStatus, participantRole: EventKitParticipantRole, participantType: EventKitParticipantType, isCurrentUser: Bool, contactPredicate: EventKitPredicate) {
    self.init(std.string(url), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = name {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), participantStatus, participantRole, participantType, isCurrentUser, contactPredicate)
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var name: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__name.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__name = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var participantStatus: EventKitParticipantStatus {
    @inline(__always)
    get {
      return self.__participantStatus
    }
    @inline(__always)
    set {
      self.__participantStatus = newValue
    }
  }
  
  var participantRole: EventKitParticipantRole {
    @inline(__always)
    get {
      return self.__participantRole
    }
    @inline(__always)
    set {
      self.__participantRole = newValue
    }
  }
  
  var participantType: EventKitParticipantType {
    @inline(__always)
    get {
      return self.__participantType
    }
    @inline(__always)
    set {
      self.__participantType = newValue
    }
  }
  
  var isCurrentUser: Bool {
    @inline(__always)
    get {
      return self.__isCurrentUser
    }
    @inline(__always)
    set {
      self.__isCurrentUser = newValue
    }
  }
  
  var contactPredicate: EventKitPredicate {
    @inline(__always)
    get {
      return self.__contactPredicate
    }
    @inline(__always)
    set {
      self.__contactPredicate = newValue
    }
  }
}
