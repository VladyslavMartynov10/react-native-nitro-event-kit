///
/// EditEventOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `EditEventOptions`, backed by a C++ struct.
 */
public typealias EditEventOptions = margelo.nitro.eventkit.EditEventOptions

public extension EditEventOptions {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `EditEventOptions`.
   */
  init(title: String?, startDate: Double?, endDate: Double?, location: String?, notes: String?, scheduleAlarm: Bool?, scheduleAlarmMinutesBefore: Double?, calendarId: String?) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = title {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = startDate {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = endDate {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = location {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = notes {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = scheduleAlarm {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = scheduleAlarmMinutesBefore {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = calendarId {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var title: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__title.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__title = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var startDate: Double? {
    @inline(__always)
    get {
      return self.__startDate.value
    }
    @inline(__always)
    set {
      self.__startDate = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var endDate: Double? {
    @inline(__always)
    get {
      return self.__endDate.value
    }
    @inline(__always)
    set {
      self.__endDate = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var location: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__location.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__location = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var notes: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__notes.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__notes = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var scheduleAlarm: Bool? {
    @inline(__always)
    get {
      return self.__scheduleAlarm.value
    }
    @inline(__always)
    set {
      self.__scheduleAlarm = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var scheduleAlarmMinutesBefore: Double? {
    @inline(__always)
    get {
      return self.__scheduleAlarmMinutesBefore.value
    }
    @inline(__always)
    set {
      self.__scheduleAlarmMinutesBefore = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var calendarId: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__calendarId.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__calendarId = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
