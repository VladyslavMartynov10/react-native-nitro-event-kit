///
/// CreateEventOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `CreateEventOptions`, backed by a C++ struct.
 */
public typealias CreateEventOptions = margelo.nitro.eventkit.CreateEventOptions

public extension CreateEventOptions {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `CreateEventOptions`.
   */
  init(event: EventKitEvent, calendarIdentifier: String?, scheduleAlarm: Bool?, scheduleAlarmMinutesBefore: Double?) {
    self.init(event, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = calendarIdentifier {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = scheduleAlarm {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = scheduleAlarmMinutesBefore {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var event: EventKitEvent {
    @inline(__always)
    get {
      return self.__event
    }
    @inline(__always)
    set {
      self.__event = newValue
    }
  }
  
  var calendarIdentifier: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__calendarIdentifier.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__calendarIdentifier = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var scheduleAlarm: Bool? {
    @inline(__always)
    get {
      return self.__scheduleAlarm.value
    }
    @inline(__always)
    set {
      self.__scheduleAlarm = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var scheduleAlarmMinutesBefore: Double? {
    @inline(__always)
    get {
      return self.__scheduleAlarmMinutesBefore.value
    }
    @inline(__always)
    set {
      self.__scheduleAlarmMinutesBefore = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
