///
/// CreateEventOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `CreateEventOptions`, backed by a C++ struct.
 */
public typealias CreateEventOptions = margelo.nitro.eventkit.CreateEventOptions

public extension CreateEventOptions {
  private typealias bridge = margelo.nitro.eventkit.bridge.swift

  /**
   * Create a new instance of `CreateEventOptions`.
   */
  init(startDate: Double, endDate: Double, title: String, location: CreateEventLocation?, notes: String?, calendarIdentifier: String, isCalendarImmutable: Bool, scheduleAlarm: Bool?, scheduleAlarmMinutesBefore: Double?) {
    self.init(startDate, endDate, std.string(title), { () -> bridge.std__optional_CreateEventLocation_ in
      if let __unwrappedValue = location {
        return bridge.create_std__optional_CreateEventLocation_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = notes {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(calendarIdentifier), isCalendarImmutable, { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = scheduleAlarm {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = scheduleAlarmMinutesBefore {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var startDate: Double {
    @inline(__always)
    get {
      return self.__startDate
    }
    @inline(__always)
    set {
      self.__startDate = newValue
    }
  }
  
  var endDate: Double {
    @inline(__always)
    get {
      return self.__endDate
    }
    @inline(__always)
    set {
      self.__endDate = newValue
    }
  }
  
  var title: String {
    @inline(__always)
    get {
      return String(self.__title)
    }
    @inline(__always)
    set {
      self.__title = std.string(newValue)
    }
  }
  
  var location: CreateEventLocation? {
    @inline(__always)
    get {
      return { () -> CreateEventLocation? in
        if let __unwrapped = self.__location.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__location = { () -> bridge.std__optional_CreateEventLocation_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_CreateEventLocation_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var notes: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__notes.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__notes = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var calendarIdentifier: String {
    @inline(__always)
    get {
      return String(self.__calendarIdentifier)
    }
    @inline(__always)
    set {
      self.__calendarIdentifier = std.string(newValue)
    }
  }
  
  var isCalendarImmutable: Bool {
    @inline(__always)
    get {
      return self.__isCalendarImmutable
    }
    @inline(__always)
    set {
      self.__isCalendarImmutable = newValue
    }
  }
  
  var scheduleAlarm: Bool? {
    @inline(__always)
    get {
      return self.__scheduleAlarm.value
    }
    @inline(__always)
    set {
      self.__scheduleAlarm = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var scheduleAlarmMinutesBefore: Double? {
    @inline(__always)
    get {
      return self.__scheduleAlarmMinutesBefore.value
    }
    @inline(__always)
    set {
      self.__scheduleAlarmMinutesBefore = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
