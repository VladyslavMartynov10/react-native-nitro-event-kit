///
/// HybridEventKitSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridEventKitSpec.hpp"

// Forward declaration of `HybridEventKitSpec_cxx` to properly resolve imports.
namespace NitroEventKit { class HybridEventKitSpec_cxx; }

// Forward declaration of `EKEvent` to properly resolve imports.
namespace margelo::nitro::eventkit { struct EKEvent; }
// Forward declaration of `EKEventAvailability` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EKEventAvailability; }
// Forward declaration of `EKEventStatus` to properly resolve imports.
namespace margelo::nitro::eventkit { enum class EKEventStatus; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "EKEvent.hpp"
#include <string>
#include "EKEventAvailability.hpp"
#include "EKEventStatus.hpp"
#include <optional>

#include "NitroEventKit-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::eventkit {

  /**
   * The C++ part of HybridEventKitSpec_cxx.swift.
   *
   * HybridEventKitSpecSwift (C++) accesses HybridEventKitSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridEventKitSpec_cxx can directly inherit from the C++ class HybridEventKitSpec
   * to simplify the whole structure and memory management.
   */
  class HybridEventKitSpecSwift: public virtual HybridEventKitSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridEventKitSpecSwift(const NitroEventKit::HybridEventKitSpec_cxx& swiftPart):
      HybridObject(HybridEventKitSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroEventKit::HybridEventKitSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::vector<EKEvent>>> getMonthlyCalendarEvents() override {
      auto __result = _swiftPart.getMonthlyCalendarEvents();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroEventKit::HybridEventKitSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::eventkit
